# this file is generated by eval.ts, do not edit it manually

name: run evals
on:
  push:
    branches:
      - "**/*eval*"
      - "*eval*"
permissions:
  contents: read
  deployments: write
env:
  DOPPLER_TOKEN: ${{ secrets.DOPPLER_TOKEN }}
jobs:
  run:
    runs-on: ${{ github.repository_owner == 'iterate' && 'depot-ubuntu-24.04-arm-4' || 'ubuntu-24.04' }}
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 24
          cache: pnpm
      - run: pnpm install
      - name: Install Doppler CLI
        uses: dopplerhq/cli-action@v2
      - name: Setup Doppler
        run: doppler setup --config dev --project os
      - name: run dependencies
        run: pnpm docker:up
      - name: migrate db
        uses: nick-fields/retry@v3
        with:
          timeout_seconds: 30
          max_attempts: 10
          retry_wait_seconds: 5
          command: pnpm db:migrate
      - name: get rid of ngrok
        run: rm packages/ngrok/package.json
      - name: simplify sandbox Dockerfile
        run: |-
          # For some reason the nodejs v24 installation in the Dockerfile fails in CI, but the built-in version of nodejs works for these purposes
          echo '
          FROM docker.io/cloudflare/sandbox:0.3.2
          EXPOSE 3000
          ' > apps/os/backend/sandbox/Dockerfile
      - name: run server and test
        run: |-
          # for some reason `doppler run -- ...` doesn't inject env vars into the server process, so write to .env
          doppler run -- printenv > apps/os/.env

          cd apps/os
          pnpm preview &

          echo '
            const main = async () => {
              for (let i = 0; i < 120; i++) {
                try {
                  const res = await fetch("http://localhost:5173");
                  if (!res.ok) throw new Error("Preview not ready");
                  console.log("Preview ready");
                  return;
                } catch (error) {
                  console.log(`Preview not ready, retrying ${i + 1}/120`);
                  await new Promise(resolve => setTimeout(resolve, 1000));
                }
              }
              throw new Error("Preview not ready");
            }
            await main();
          ' > wait.mjs

          node wait.mjs

          # finally, run the tests
          export PROJECT_NAME=gh-evals-${{ github.head_ref || github.ref_name }}
          doppler run -- pnpm evalite run-once
      - name: export ui
        if: always()
        working-directory: apps/os
        run: pnpm tsx evals/evalite-exporter.ts
      - name: upload evalite ui
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: evalite
          path: apps/os/ignoreme/evalite-ui